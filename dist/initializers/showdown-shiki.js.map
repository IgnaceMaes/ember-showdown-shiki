{"version":3,"file":"showdown-shiki.js","sources":["../../src/initializers/showdown-shiki.ts"],"sourcesContent":["import Application from '@ember/application';\n\nimport showdown from 'showdown';\nimport {\n  bundledLanguages,\n  createHighlighter,\n  type LanguageInput,\n  type ShikiTransformer,\n} from 'shiki';\nimport { transformerNotationDiff } from '@shikijs/transformers';\n\nimport '../styles/shiki.css';\nimport GlimmerHandlebarsGrammar from '../glimmer-handlebars-grammar.ts';\n\nconst CODE_BLOCK_REGEX =\n  /(?:^|\\n)(?: {0,3})(```+|~~~+)(?: *)([^\\n`~]*)\\n([\\s\\S]*?)\\n(?: {0,3})\\1/g;\n\nconst EMPTY_LINE_DIFF_PLACEHOLDER = 'EMPTY_LINE_DIFF_PLACEHOLDER';\n\n/**\n * Creates a Shiki transformer that applies color replacements on the style attribute.\n * @param colorReplacements The color replacements to apply.\n * @returns The Shiki transformer.\n */\nfunction colorReplacementOnStyle(\n  colorReplacements: Record<string, string>,\n): ShikiTransformer {\n  return {\n    pre(hast: Parameters<NonNullable<ShikiTransformer['pre']>>[0]) {\n      Object.entries(colorReplacements).forEach(([from, to]) => {\n        if (hast.properties['style']) {\n          hast.properties['style'] = (\n            hast.properties['style'] as string\n          ).replace(from, to);\n        }\n      });\n    },\n  };\n}\n\nasync function initializeShiki(theme: string, languages: string[]) {\n  const highlighter = await createHighlighter({\n    themes: [theme],\n    langs: [GlimmerHandlebarsGrammar as unknown as LanguageInput, ...languages],\n  });\n\n  return highlighter;\n}\n\nfunction stripQuotes(value: string) {\n  if (value?.startsWith('\"') && value?.endsWith('\"')) {\n    return value.substring(1, value.length - 1);\n  }\n  return value;\n}\n\nfunction extractCodeBlockHeader(languageBlock: string) {\n  const match = languageBlock.match(/(\\w+) ?(\\{([^}]*)\\})?/);\n  let language = '';\n  let attributeString = '';\n\n  if (match && match[1]) {\n    language = match[1];\n  }\n\n  if (match && match[3]) {\n    attributeString = match[3];\n  }\n\n  const attributes: Record<string, string> = {};\n\n  attributeString.split(' ').forEach((attribute) => {\n    const [attibuteKey, attributeValue] = attribute.split('=');\n    if (attibuteKey !== undefined && attributeValue !== undefined) {\n      attributes[attibuteKey] = stripQuotes(attributeValue);\n    }\n  });\n\n  return {\n    language,\n    attributes,\n  };\n}\n\nfunction addDiffInfo(codeblock: string, diffInfoArgs: string[]) {\n  const lines = codeblock.split('\\n');\n\n  diffInfoArgs.forEach((diffInfoArg) => {\n    const operator = diffInfoArg[0];\n    if (operator !== undefined) {\n      const lineNo = +diffInfoArg.replace(operator, '');\n      /**\n       * The Shiki notation diff transform leaves out empty lines. To work around this issue,\n       * we replace empty lines with a placeholder and then add the diff notation.\n       * See tracking issue: https://github.com/shikijs/shiki/issues/589\n       */\n      const text =\n        lines[lineNo - 1] === ''\n          ? EMPTY_LINE_DIFF_PLACEHOLDER\n          : lines[lineNo - 1];\n      if (operator === '+') {\n        lines[lineNo - 1] = text + '// [!code ++]';\n      } else {\n        lines[lineNo - 1] = text + '// [!code --]';\n      }\n    }\n  });\n  return lines.join('\\n');\n}\n\nfunction transformCodeBlock(\n  wholeMatch: string,\n  languageBlock: string,\n  inputCodeblock: string,\n  highlighter: Awaited<ReturnType<typeof createHighlighter>>,\n  options: showdown.ShowdownOptions,\n  globals: { ghCodeBlocks: unknown[] },\n  colorReplacements: Record<string, string>,\n) {\n  const end = options.omitExtraWLInCodeBlocks ? '' : '\\n';\n  let codeblock = showdown.subParser('detab')(inputCodeblock, options, globals);\n  codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n  codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing whitespace\n\n  const { language, attributes } = extractCodeBlockHeader(languageBlock);\n  const shikiLanguage = highlighter.getLoadedLanguages().includes(language)\n    ? language\n    : 'text';\n\n  if (shikiLanguage !== 'text') {\n    // Restore dollar signs & tremas temporarily so Prism won't highlight this\n    // See https://github.com/showdownjs/showdown/blob/a9f38b6f057284460d6447371f3dc5dea999c0a6/src/converter.js#L285 for more info\n    codeblock = codeblock.replace(/¨D/g, '$$');\n    codeblock = codeblock.replace(/¨T/g, '¨');\n  }\n\n  const diffInfoArgs = attributes['data-diff']?.split(',');\n  if (diffInfoArgs) {\n    codeblock = addDiffInfo(codeblock, diffInfoArgs);\n  }\n\n  codeblock = highlighter.codeToHtml(codeblock, {\n    lang: shikiLanguage,\n    theme: highlighter.getLoadedThemes()[0]!,\n    transformers: [\n      transformerNotationDiff(),\n      colorReplacementOnStyle(colorReplacements),\n    ],\n    colorReplacements,\n  });\n  codeblock = codeblock.replace(\n    '<code>',\n    `<code class=\"language-${shikiLanguage} line-numbers\">`,\n  );\n  codeblock = `${codeblock}${end}`;\n  codeblock = codeblock.replaceAll(EMPTY_LINE_DIFF_PLACEHOLDER, '');\n\n  if (attributes['data-filename']) {\n    const fileName = attributes['data-filename'] ?? '';\n    codeblock = `<div><div class=\"filename ${shikiLanguage}\">${fileName}</div>${codeblock}</div>`;\n  }\n  const codeblockHashed = showdown.subParser('hashBlock')(\n    codeblock,\n    options,\n    globals,\n  );\n\n  // Since GHCodeblocks can be false positives, we need to\n  // store the primitive text and the parsed text in a global var,\n  // and then return a token\n  return (\n    '\\n\\n¨G' +\n    (globals.ghCodeBlocks.push({\n      text: wholeMatch,\n      codeblock: codeblockHashed,\n    }) -\n      1) +\n    'G\\n\\n'\n  );\n}\n\nexport async function initialize(application: Application) {\n  application.deferReadiness();\n\n  const config = application.resolveRegistration('config:environment') as {\n    'ember-showdown-shiki'?: {\n      theme?: string;\n      languages?: string[];\n      colorReplacements?: Record<string, string>;\n    };\n  };\n\n  const defaultColorReplacements = {\n    '#24292e': '#1c1e24', // Use color-gray-900 for the code block background\n    '#6a737d': '#7e8791', // Lighten comment color to be AA compliant\n  };\n\n  const {\n    theme = 'github-dark',\n    languages = Object.keys(bundledLanguages),\n    colorReplacements = defaultColorReplacements,\n  } = config['ember-showdown-shiki'] ?? {};\n  const highlighter = await initializeShiki(theme, languages);\n\n  showdown.subParser('githubCodeBlocks', function (text, options, globals) {\n    // Early exit if option is not enabled\n    if (!options.ghCodeBlocks) {\n      return text;\n    }\n\n    // Preprocess\n    let textTransformed = globals.converter._dispatch(\n      'githubCodeBlocks.before',\n      text,\n      options,\n      globals,\n    );\n\n    // Transform all code blocks\n    textTransformed = textTransformed.replace(\n      CODE_BLOCK_REGEX,\n      (\n        wholeMatch: string,\n        _delim: string,\n        languageBlock: string,\n        inputCodeblock: string,\n      ) =>\n        transformCodeBlock(\n          wholeMatch,\n          languageBlock,\n          inputCodeblock,\n          highlighter,\n          options,\n          globals,\n          colorReplacements,\n        ),\n    );\n\n    return globals.converter._dispatch(\n      'githubCodeBlocks.after',\n      textTransformed,\n      options,\n      globals,\n    );\n  });\n\n  application.advanceReadiness();\n}\n\nexport default {\n  initialize,\n};\n"],"names":["CODE_BLOCK_REGEX","EMPTY_LINE_DIFF_PLACEHOLDER","colorReplacementOnStyle","colorReplacements","pre","hast","Object","entries","forEach","from","to","properties","replace","initializeShiki","theme","languages","highlighter","createHighlighter","themes","langs","GlimmerHandlebarsGrammar","stripQuotes","value","startsWith","endsWith","substring","length","extractCodeBlockHeader","languageBlock","match","language","attributeString","attributes","split","attribute","attibuteKey","attributeValue","undefined","addDiffInfo","codeblock","diffInfoArgs","lines","diffInfoArg","operator","lineNo","text","join","transformCodeBlock","wholeMatch","inputCodeblock","options","globals","end","omitExtraWLInCodeBlocks","showdown","subParser","shikiLanguage","getLoadedLanguages","includes","codeToHtml","lang","getLoadedThemes","transformers","transformerNotationDiff","replaceAll","fileName","codeblockHashed","ghCodeBlocks","push","initialize","application","deferReadiness","config","resolveRegistration","defaultColorReplacements","keys","bundledLanguages","textTransformed","converter","_dispatch","_delim","advanceReadiness"],"mappings":"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"}